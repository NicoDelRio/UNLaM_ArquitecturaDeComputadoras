  ADDR B1 B2 B3 B4 thrass11.tmp                                     PAGE       1

                   ; 13-Tipo_Examen_Vector_de_256_elementos_de(16bits)(sin_
.                  ERROR)
                   ; SIN ERROR EN LAS VARIABLES.
                   ; SI LOS 256 ELEMENTOS DEL VECTOR CUMPLIRIAN UNA/VARIAS DE
.                  LAS CONDICIONES (ACUM = 00)

                   * Dado un vector de 256 elementos, obtener la cantidad de
.                  negativos,
                   * multiplos de 8 y nulos del mismo
                   * Se conoce la direccion inicial

                   * En el juego de prueba repito 32 veces los mismos valores
.                  (08,04,02,01,$81,$82,$80,$00), por tanto hay:
                   * - 32 ceros (20h)
                   * - 96 negativos (60h)
                   * - 96 multiplos de ocho (60h)

                   * Recordar que cero es mltiplo de 8 y los negativos pueden
.                  ser mltiplos de 8
                   *************************************************************
.                  **********************************************
                   * IMPORTANTE: Para simular este ejercicio debe cambiar la
.                  configuracion de la memoria
                   * View->Memory->Memory configuration. Cerrar todo, establezca
.                  el rea de RAMOEnd de 00FF a (por ejemplo) 02FF.
                   *************************************************************
.                  **********************************************

                   ; CONSTANTES
                   RAM                     EQU             $0000
                   ROM                     EQU             $8000
                   CICLOS                  EQU             256
.                  ; CANTIDAD DE ELEMENTOS DEL VECTOR
                   MULTIPLO                EQU             8

                   ; VARIABLES
                                           ORG             RAM
                   cantC                   RMB             2
.                  * ceros
                   cantN                   RMB             2
.                  * negativos
                   cantO                   RMB             2
.                  * multiplos de ocho

                   *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *********************
                   ; VECTOR IDEM AL EJER 11 CARGADO CON DW (CON ESTE VECTOR, NO
.                  HAY NUMEROS NEGATIVOS PORQUE EL "$81,$82,$80" QUEDA EN EL
.                  BYTE MENOS SIGNIFICATIVO). SI COINCIDEN LA CANTIDAD DE CEROS
.                  Y MULTIPLOS DE 8.
                   ;vector                 DW              08,04,02,01,$81,$82,
  ADDR B1 B2 B3 B4 thrass11.tmp                                     PAGE       2

.                  $80,$00,08,04,02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,
.                  $00,08,04,02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,
.                  08,04,02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,08,
.                  04,02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,08,04,
.                  02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,08,04,02,
.                  01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,08,04,02,01,
.                  $81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,08,04,02,01,$81,
.                  $82,$80,$00,08,04,02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,
.                  $80,$00,08,04,02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,
.                  $00,08,04,02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,
.                  08,04,02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,08,
.                  04,02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,08,04,
.                  02,01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,08,04,02,
.                  01,$81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00,08,04,02,01,
.                  $81,$82,$80,$00,08,04,02,01,$81,$82,$80,$00
                   *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *********************
                   ; VECTOR IDEM AL EJER 11 CARGADO CON DB (CON "$00," ANTES DE
.                  CADA VALOR) (POR SER CADA ELEMENTO DE 2 BYTES)
                   ;vector         DB              $00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00
                   ;               DB              $00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00
  ADDR B1 B2 B3 B4 thrass11.tmp                                     PAGE       3

                   ;               DB              $00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00,$00,08,$00,04,$00,02,$00,01,
.                  $00,$81,$00,$82,$00,$80,$00,$00
                   *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *********************
                   ; VECTOR IDEM AL EJER 11 CARGADO CON DW (REEMPLAZANDO LOS
.                  "$81,$82,$80" POR "$8001,$8002,$8000". COINCIDEN LAS TRES
.                  CANTIDAD (CEROS, NEGATIVOS Y MULTIPLOS DE 8).
  0006 00 08 00 04 vector          DW              08,04,02,01,$8001,$8002,
. 000A 00 02 00 01 $8000,$00,08,04,02,01,$8001,$8002,$8000,$00,08,04,02,01,
. 000E 80 30 80 02 $8001,$8002,$8000,$00,08,04,02,01,$8001,$8002,$8000,$00,08,
. 0012 80 00 00 00 04,02,01,$8001,$8002,$8000,$00,08,04,02,01,$8001,$8002,$8000,
. 0016 00 08 00 30 $00,08,04,02,01,$8001,$8002,$8000,$00,08,04,02,01,$8001,
. 001A 00 02 00 01 $8002,$8000,$00,08,04,02,01,$8001,$8002,$8000,$00,08,04,02,
. 001E 80 01 80 02 01,$8001,$8002,$8000,$00,08,04,02,01,$8001,$8002,$8000,$00,
. 0022 80 00 00 00 08,04,02,01,$8001,$8002,$8000,$00,08,04,02,01,$8001,$8002,
. 0026 00 08 00 04 $8000,$00,08,04,02,01,$8001,$8002,$8000,$00,08,04,02,01,
. 002A 00 02 00 00 $8001,$8002,$8000,$00,08,04,02,01,$8001,$8002,$8000,$00,08,
. 002E 80 01 80 02 04,02,01,$8001,$8002,$8000,$00,08,04,02,01,$8001,$8002,$8000,
. 0032 80 00 00 00 $00,08,04,02,01,$8001,$8002,$8000,$00,08,04,02,01,$8001,
. 0036 00 30 00 04 $8002,$8000,$00,08,04,02,01,$8001,$8002,$8000,$00,08,04,02,
. 003A 00 02 00 01 01,$8001,$8002,$8000,$00,08,04,02,01,$8001,$8002,$8000,$00,
. 003E 80 01 80 00 08,04,02,01,$8001,$8002,$8000,$00,08,04,02,01,$8001,$8002,
. 0042 80 00 00 00 $8000,$00,08,04,02,01,$8001,$8002,$8000,$00
. 0046 00 08 00 04
. 004A 00 01 00 01
. 004E 80 01 80 02
. 0052 80 00 00 02
. 0056 00 08 00 04
. 005A 00 02 00 01
. 005E 80 00 80 02
. 0062 80 00 00 00
. 0066 00 08 00 00
. 006A 00 02 00 01
. 006E 80 01 80 02
. 0072 80 30 00 00
. 0076 00 08 00 04
. 007A 00 02 00 02
. 007E 80 01 80 02
. 0082 80 00 00 00
. 0086 00 00 00 04
. 008A 00 02 00 01
. 008E 80 01 80 02
. 0092 80 00 00 00
. 0096 00 08 00 04
. 009A 00 00 00 01
. 009E 80 01 80 02
. 00A2 80 00 00 02
. 00A6 00 08 00 04
. 00AA 00 02 00 01
. 00AE 80 30 80 02
  ADDR B1 B2 B3 B4 thrass11.tmp                                     PAGE       4

. 00B2 80 00 00 00
. 00B6 00 08 00 20
. 00BA 00 02 00 01
. 00BE 80 01 80 02
. 00C2 80 30 00 00
. 00C6 00 08 00 04
. 00CA 00 02 00 30
. 00CE 80 01 80 02
. 00D2 80 00 00 00
. 00D6 00 20 00 04
. 00DA 00 02 00 01
. 00DE 80 01 80 30
. 00E2 80 00 00 00
. 00E6 00 08 00 04
. 00EA 00 00 00 01
. 00EE 80 01 80 02
. 00F2 80 00 00 20
. 00F6 00 08 00 04
. 00FA 00 02 00 01
. 00FE 80 30 80 02
. 0102 80 00 00 00
. 0106 00 08 00 30
. 010A 00 02 00 01
. 010E 80 01 80 02
. 0112 80 20 00 00
. 0116 00 08 00 04
. 011A 00 02 00 30
. 011E 80 01 80 02
. 0122 80 00 00 00
. 0126 00 30 00 04
. 012A 00 02 00 01
. 012E 80 01 80 20
. 0132 80 00 00 00
. 0136 00 08 00 04
. 013A 00 30 00 01
. 013E 80 01 80 02
. 0142 80 00 00 01
. 0146 00 08 00 04
. 014A 00 02 00 01
. 014E 80 20 80 02
. 0152 80 00 00 00
. 0156 00 08 00 30
. 015A 00 02 00 01
. 015E 80 01 80 02
. 0162 80 6D 00 00
. 0166 00 08 00 04
. 016A 00 02 00 02
. 016E 80 01 80 02
. 0172 80 00 00 00
. 0176 00 30 00 04
. 017A 00 02 00 01
. 017E 80 01 80 30
. 0182 80 00 00 00
. 0186 00 08 00 04
. 018A 00 20 00 01
. 018E 80 01 80 02
. 0192 80 00 00 30
. 0196 00 08 00 04
. 019A 00 02 00 01
. 019E 80 30 80 02
. 01A2 80 00 00 00
  01A6 00 08 00 04                 DW              08,04,02,01,$8001,$8002,
. 01AA 00 02 00 01 $8000,$00,08,04,02,01,$8001,$8002,$8000,$00,08,04,02,01,
. 01AE 80 01 80 02 $8001,$8002,$8000,$00,08,04,02,01,$8001,$8002,$8000,$00,08,
. 01B2 80 00 00 00 04,02,01,$8001,$8002,$8000,$00,08,04,02,01,$8001,$8002,$8000,
  ADDR B1 B2 B3 B4 thrass11.tmp                                     PAGE       5

. 01B6 00 08 00 04 $00
. 01BA 00 02 00 01
. 01BE 80 01 80 02
. 01C2 80 00 00 00
. 01C6 00 08 00 04
. 01CA 00 02 00 01
. 01CE 80 01 80 02
. 01D2 80 00 00 00
. 01D6 00 08 00 04
. 01DA 00 02 00 01
. 01DE 80 01 80 02
. 01E2 80 00 00 00
. 01E6 00 08 00 04
. 01EA 00 02 00 01
. 01EE 80 01 80 02
. 01F2 80 00 00 00
. 01F6 00 08 00 04
. 01FA 00 02 00 01
. 01FE 80 01 80 02
. 0202 80 00 00 00
                   *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *********************
                   ; VECTOR IDEM AL EJER 11 CARGADO CON DW "TODOS NEGATIVOS".
.                  (EMPEZANDO CON "$80")
                   ; SIN ERROR EN "cantN" POR SER LOS 256 ELEMENTOS DEL VECTOR
.                  NEGATIVOS (cantN = 01 , cantN+1 = 00)
                   ;vector         DW              $8008,$8004,$8002,$8001,
.                  $8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,
.                  $8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,
.                  $8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,$8008,$8004,
.                  $8002,$8001,$8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,
.                  $8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,
.                  $8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,
.                  $8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,$8008,$8004,
.                  $8002,$8001,$8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,
.                  $8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,
.                  $8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,
.                  $8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,$8008,$8004,
.                  $8002,$8001,$8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,
.                  $8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,
.                  $8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000
                   ;               DW              $8008,$8004,$8002,$8001,
.                  $8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,
.                  $8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,
.                  $8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,$8008,$8004,
.                  $8002,$8001,$8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,
.                  $8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,
.                  $8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,
.                  $8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,$8008,$8004,
.                  $8002,$8001,$8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,
.                  $8081,$8082,$8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,
  ADDR B1 B2 B3 B4 thrass11.tmp                                     PAGE       6

.                  $8080,$8000,$8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000,
.                  $8008,$8004,$8002,$8001,$8081,$8082,$8080,$8000
                   *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *************************************************************
.                  *********************

                   ; CODIGO
                                           ORG             ROM
  8000 7F 00 00                            CLR             cantC
.                  ; INICIALIZO LAS VARIABLES
  8003 7F 00 01                            CLR             cantC+1
  8006 7F 00 02                            CLR             cantN
  8009 7F 00 03                            CLR             cantN+1
  800C 7F 00 04                            CLR             cantO
  800F 7F 00 05                            CLR             cantO+1
  8012 18 CE 00 06                         LDY             #(VECTOR)
.                  ; Y = DIR 1ER ELEM VECTOR
                   BUCLE
  8016 18 EC 00                            LDD             0,Y
.                  ; BUCLE SE REPITE "CICLOS" VECES
  8019 26 08                               BNE             NO_CERO
.                  ; (?Z=0). IF(!D==0) -> SALTA A NO_CERO
  801B 7C 00 01                            INC             cantC+1
.                  ; IF(D==0) -> cantC(Low)++
  801E 26 03                               BNE             NO_CERO
.                  ; (?Z=0). SI cantC(Low) QUEDO EN CERO DESPUES DE SUMAR, cantC
.                  (High)++.
  8020 7C 00 00                            INC             cantC
.                  ; cantC(High)++
                   NO_CERO
  8023 4D                                  TSTA
.                  ; (A-0)
  8024 2A 08                               BPL             NO_NEG
.                  ; (?N=0). IF(!D<0) -> SALTA A NO_NEG
  8026 7C 00 03                            INC             cantN+1
.                  ; IF(D<0) -> cantN(L)++
  8029 26 03                               BNE             NO_NEG
.                  ; (?Z=0). SI cantN(Low) QUEDO EN CERO DESPUES DE SUMAR, cantN
.                  (High)++.
  802B 7C 00 02                            INC             cantN
.                  ; cantN(High)++
                   NO_NEG
  802E C5 07                               BITB            #%0111
  8030 26 08                               BNE             NO_MULTIPLO
.                  ; IF(!B==0) -> SALTA A NO_MULTIPLO
  8032 7C 00 05                            INC             cantO+1
.                  ; IF(A==0 && B==0) -> cantO(L)++
  8035 28 03                               BVC             NO_MULTIPLO
.                  ; (?V=0). SI NO HUBO OVERFLOW, SALTA.
  8037 7C 00 04                            INC             cantO
.                  ; cantO(High)++
                   NO_MULTIPLO
  ADDR B1 B2 B3 B4 thrass11.tmp                                     PAGE       7

  803A 18 08                               INY
.                  ; Y+1 -> Y
  803C 18 08                               INY
.                  ; Y+1 -> Y (2 VECES)
                   ;HORRIBLE               LDY             0,Y
.                  ; NO IDEM A INY (2 VECES). "DATO" (2 BYTES) EN DIR (Y+2) -> Y
  803E 18 8C 02 06                         CPY             #(VECTOR+CICLOS*2)
.                  ; #(VECTOR+CICLOS*2) = DIR ULTIMO ELEM VECTOR. (*2 PORQUE LOS
.                  ELEM DEL VECTOR SON DE 2 BYTES)
  8042 26 D2                               BNE             BUCLE
.                  ; IF(Y==DIR ULTIMO ELEM VECTOR) -> SALE DEL BUCLE (SINO
.                  REPITE "CICLOS" VECES).
  8044 20 FE       FIN                     BRA             FIN

  Symbol Table 

  RAM                0000
  NO_NEG             802E
  CICLOS             0100
  VECTOR             0006
  CANTC              0000
  BUCLE              8016
  CANTN              0002
  CANTO              0004
  MULTIPLO           0008
  FIN                8044
  NO_CERO            8023
  ROM                8000
  NO_MULTIPLO        803A
