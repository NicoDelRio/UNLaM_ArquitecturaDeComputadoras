  ADDR B1 B2 B3 B4 thrass11.tmp                                     PAGE       1

                   ; 1ra Parte: Declaracion de constantes y variables
                   ; ORG = set origin to.
                   ;       Sintaxis: ORG <direccin/etiqueta>
                   ;       Determina la direccin a partir de la que se ubicar el
.                  cdigo siguiente.
                   ;       De no emplearse las direcciones se asignan de forma
.                  consecutiva.
                   ;       No admite etiqueta (a su izquierda). La direccin de
.                  origen puede expresarse como nmeros o como una etiqueta.
                   ; EQU = "CONSTANTE". Equate to.
                   ;       Sintaxis: <etiqueta> EQU <direccin/etiqueta/valor>
                   ;       Es el equivalente a #define en C/C++.
                   ;       La etiqueta (de la izquierda) se asociar al valor/
.                  direccin de la derecha.
                   ;       Si se especifica una etiqueta a la derecha, la misma
.                  debe haberse definido.
                   ;       EQU puede usarse para crear smbolos de 8 o 16 bits.
                   ; RMB = "VARIABLE". Reserve memory bytes.
                   ;       Sintaxis: <etiqueta> RMB <cantidad de bytes/etiqueta>
                   ;       Reserva una cantidad de bytes y la asocia al
.                  identificador etiqueta (de la izquierda).
                   ;       Aunque no define un tipo de dato, es similar a la
.                  declaracin de variable en C/C++.
                   ;       (Asigna memoria, determina tamao, asocia un nombre).
.                  La etiqueta queda relacionada a la direccin
                   ;       del byte ms significativo (en palabras multibyte).
                   ;       El ensamblador reemplazar <etiqueta> (de la
.                  izquierda) por la direccin correspondiente.
                   ;       Para palabras multibytepuede indicrsele al
.                  ensamblador que realice alguna operacin aritmtica con
                   ;       dicha direccin.
                   ; FCB o DB = "VECTOR de 1 byte el dato". Form constant byte.
                   ;       Sintaxis:  <etiqueta> FCB <valores separados por
.                  coma>
                   ; FDB o DW = "VECTOR de 2 bytes el dato". Form constant
.                  double byte.
                   ;       Sintaxis:  <etiqueta> FCB <valores separados por
.                  coma>
                   ;       Define un vector cuyos elementos ocupan dos bytes
.                  cada uno, y lo asocia a <etiqueta>.
                   ;       Esta directiva asigna memoria y la inicializa. Puede
.                  usarse para un solo elemento.


                   ; 2da Parte: Codigo del Programa
                   ; Convencin de prefijos en el ensamblador THRSim:
                   ; $ hexadecimal
                   ; @ octal
                   ; % binario
                   ; ' ascii(comilla simple)
                   ; # modo de direccionamiento inmediato


                   ; 3ra Parte: Asignacion de valores a las variables
                   ; <Etiqueta> (FCB/DB/FDB/DW) <Valor (empieza con #)/
.                  Direccion>
                   ; Se puede Hardcodear a traves del Memory Dump.
                   ; Por fila aparecen 16 dir de 8 bits
                   ; $0000 "ff" (dir de memoria 0000)
                   ; $0000 ff ff ff "ff" (dir de memoria 0003)
                   ; $0010 "ff" (dir de memoria 0016 = 10 Hexadecimal)

                   *------------------------------------------------------------
.                  -------------------------------------------------------------
.                  ------------------
  ADDR B1 B2 B3 B4 thrass11.tmp                                     PAGE       2

                   ; Programa: 04-Suma en N Bytes (RESULTADO byte mas signif en
.                  cero)

                   ; 1ra Parte: Declaracion de constantes y variables
                   ; Etiqueta              ; Instruccion   ; Operando
.                  ; Comentario
                                           ORG             $0000
.                  ; Dir donde se declaran las variables y constantes
                   MAIN                    EQU             $8000
.                  ; ROM0Start (Memory Configuration) Para el ORG de 2da Parte
                   BYTES                   EQU             10
.                  ; EQU = Constante
                   OPERANDO1               RMB             BYTES
.                  ; Variable de N BYTES de tamao
                   OPERANDO2               RMB             BYTES
.                  ; Idem OPERANDO1
                   RESULTADO               RMB             BYTES+1
.                  ; Variable de "N BYTES + 1" de tamao.

.                  ; El +1 es para el Carry de la suma de los Bytes mas signif
.                  de los operandos

                   ; 2da Parte: Codigo del Programa
                   ; Etiqueta              ; Instruccion   ; Operando
.                  ; Comentario
                                           ORG             MAIN
.                  ; GUARDA A PARTIR DEL ROM0Start
  8000 7F 00 14                            CLR             RESULTADO
.                  ; Borra BYTE mas significativo.
  8003 CE 00 09                            LDX             #(OPERANDO1+BYTES-1)
.                  ; Guarda en X la dir de OPERANDO1 menos significativo.
.                  PUNTERO
  8006 C6 0A                               LDAB            #(BYTES)
.                  ; (Funcion FOR). Guarda en B la cantidad de iteracciones.
  8008 0C                                  CLC
.                  ; CLC: Clear Carry Bit: (0 -> C)
  8009 A6 00       SUMAS_PARC              LDAA            0,X
.                  ; Guarda en Acum A dato de la dir de REG X (ACTUAL)
  800B A9 0A                               ADCA            BYTES,X
.                  ; Add with Carry to A: (A+M+C->A)
  800D A7 15                               STAA            BYTES*2+1,X
.                  ; Guarda en RESULTADO el dato en A: (A->M)
  800F 09                                  DEX
.                  ; IX-1 -> IX. Decrementa X
  8010 5A                                  DECB
.                  ; B-1 -> B. Decrementa B. Si quedo en CERO, Z=1
  8011 26 F6                               BNE             SUMAS_PARC
.                  ; (?Z=0). Si Z=1, sale del bucle SUMAS_PARC.
  8013 24 03                               BHS             NO_CARRY
.                  ; (Funcion IF). (?C=0). Si C=0 salta a NO_CARRY. Si C=1, byte
.                  mas sign de RESULTADO = 1.
  8015 7C 00 14                            INC             RESULTADO
.                  ; Byte de RESULTADO mas signif 1, si C=1.
                   NO_CARRY
  8018 20 FE       FIN                     BRA             FIN
.                  ; BRA (rel): Branch Always: (? 1 = 1)

.                  ; LOS PROG SIEMPRE FINALIZAN CON UN BUCLE (LOOP).



                   ; 3ra Parte: Asignacion de valores a las variables
                   ; 1ra Parte: Declaracion de constantes y variables
                   ; Etiqueta              ; Instruccion   ; Operando
.                  ; Comentario
  ADDR B1 B2 B3 B4 thrass11.tmp                                     PAGE       3

                                           ORG             OPERANDO1
.                  ; Dir donde se declara la variable OPERANDO1
  0000 96 F5 DA 4C                         DB              $96,$F5,$DA,$4C,$00,
. 0004 00 DE 8F A2 $DE,$8F,$A2,$05,$28
. 0008 05 28
                                           ORG             OPERANDO2
.                  ; Dir donde se declara la variable OPERANDO2
  000A 27 A6 10 9B                         DB              $27,$A6,$10,$9B,$F5,
. 000E F5 07 44 E6 $07,$44,$E6,$59,$42
. 0012 59 42

                   ; RESULTADO INICIALIZADO EN 0 EN EL CODIGO
                   ; COMENTADO             ORG             RESULTADO
.                  ; Dir donde se declara la variable
                   ; COMENTADO             DB              $00,$00,$00,$00,$00,
.                  $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00






  Symbol Table 

  BYTES              000A
  RESULTADO          0014
  OPERANDO1          0000
  OPERANDO2          000A
  MAIN               8000
  FIN                8018
  SUMAS_PARC         8009
  NO_CARRY           8018
